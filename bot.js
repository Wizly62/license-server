const { Telegraf } = require('telegraf');
const axios = require('axios');

const BOT_TOKEN = '7393517628:AAEweqPfevdcExVRahjPa3fnC8iYTta_zRo';
const LICENSE_SERVER = 'https://license-server-production-dac6.up.railway.app'; // ‚Üê –¢–í–û–ô URL

const bot = new Telegraf(BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply(
    'üîë **–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏**\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    'üî∏ /gen HWID - –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á\n' +
    'üî∏ /list - –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π\n' +
    'üî∏ /ban KEY - –ó–∞–±–∞–Ω–∏—Ç—å –∫–ª—é—á',
    { parse_mode: 'Markdown' }
  );
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
bot.command('gen', async (ctx) => {
  const hwid = ctx.message.text.split(' ')[1];
  if (!hwid) return ctx.reply('‚ùå –ù–∞–ø–∏—à–∏ `/gen HWID`', { parse_mode: 'Markdown' });

  try {
    const { data } = await axios.post(`${LICENSE_SERVER}/generate`, { hwid });
    ctx.reply(`‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω!\n\nüîë: \`${data.key}\`\nüñ•Ô∏è HWID: \`${hwid}\``, { parse_mode: 'Markdown' });
  } catch (error) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞! –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.');
  }
});

// –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
bot.command('list', async (ctx) => {
  try {
    const { data } = await axios.get(`${LICENSE_SERVER}/licenses`);
    if (!data.length) return ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.');

    let msg = 'üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:\n\n';
    data.forEach(license => {
      msg += `üîë ${license.key}\nüñ•Ô∏è ${license.hwid}\n\n`;
    });
    ctx.reply(msg);
  } catch (error) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞!');
  }
});

// –ë–∞–Ω –∫–ª—é—á–∞
bot.command('ban', async (ctx) => {
  const key = ctx.message.text.split(' ')[1];
  if (!key) return ctx.reply('‚ùå –ù–∞–ø–∏—à–∏ `/ban KEY`', { parse_mode: 'Markdown' });

  try {
    await axios.post(`${LICENSE_SERVER}/ban`, { key });
    ctx.reply(`üîí –ö–ª—é—á \`${key}\` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`, { parse_mode: 'Markdown' });
  } catch (error) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞! –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
